add a "word count" input 

Add an input field under the "Send" button that lets the user ask the
LLM to limit the number of words in the response.  This is not a token
limit provided to the Grokker API, but rather a request to the LLM as
part of the prompt. The input should be labeled "Word Count" and
should accept a positive integer value. If the user enters a value,
we will append a sentencthe to the prompt asking the LLM to limit
the response to that many words. If the user does not enter a value,
we do not append the sentence.

The value the user enters should be persistent; the user should not
need to re-enter the value every time they hit "Send". 


In:
  x/storm/main.go
Out:
  x/storm/main.go

.stop

- remove paste
- add a spinner in the status box 
- some sort of bookmarks
- autopopulate models list
- embeddings and vector db 


.stop

each agent uses LLM to compose messages

Modify main.go and main_test.go to implement the following
requirements:

Before an agent sends a message, it MUST compose the message by
sending its goal.md, pseudocode.md, and messages.log files to the
Grokker API at the given model using the SendWithFiles function. The
Grokker API will then generate a message based on the agent's current
state and the communication protocols it has learned, and the agent
MUST extract the message from the API response using the ExtractFiles
function. The agent will then send this message to the intended
recipient via the main goroutine.

The agent subdirectory MUST also contain a sysmsg.md file that contains
the system message that the agent will use to generate its messages.
The content of this file MUST be used to set the system message for
the Grokker API. See example-agent-sysmsg.md for an example of an
sysmsg.md file.

If you are unable to meet these requirements, please add a comment in the
code explaining why you cannot meet the requirements and what you
need from me to help you meet the requirements.

Other requirements are in requirements.md.

Sysmsg:                                                                                                                     
  You are an expert software developer specialized in creating
  adaptive, multi-agent systems simulations using the Go programming
  language. Your task is to generate modular and scalable Go code to
  simulate a system of agents communicating with each other. The
  agents must dynamically evolve their communication protocols over
  time based on the tasks they perform, rather than using pre-defined
  message formats. The agents should discover new communication
  strategies through interaction, and adapt their message structure to
  improve coordination and task efficiency. Ensure that the code
  leverages concurrency, is easily extendable for new agent types, and
  allows for flexible message parsing and generation. Do not
  quote or escape single backticks in Go code -- Go uses backticks
  for raw string literals.  Do not remove or alter comments unless
  they are incorrect or misleading.  Always provide the complete file
  -- do not summarize or elide parts of the file. Do not re-wrap lines
  unless you are making other changes to the paragraph.  Lines must be
  wrapped at 70 characters.  
In:
  x/adaptive-communication/requirements.md
  x/adaptive-communication/example-agent-sysmsg.md
  v3/cli/cli.go
  v3/aidda/aidda.go
  v3/core/chat.go
  x/adaptive-communication/main.go
  x/adaptive-communication/main_test.go
Out:
  x/adaptive-communication/main.go
  x/adaptive-communication/main_test.go

.stop


analyze the given code and make recommendations for improvements

In:
    v3/util/util.go
    v3/cli/chat_test.go
    v3/cli/cli.go
    v3/cli/cli_test.go
    v3/cli/migration_test.go
    v3/lang/go/split.go
    v3/lang/go/split_test.go
    v3/core/grokker_test.go
    v3/core/chunk.go
    v3/core/chat.go
    v3/core/migrate.go
    v3/core/grokker.go
    v3/core/gateway.go
    v3/core/git.go
    v3/core/model.go
    v3/core/api.go
    v3/core/document.go
    v3/cmd/grok/main.go
    v3/aidda/aidda_test.go
    v3/aidda/cmd/aidda3/main.go
    v3/aidda/run.go
    v3/aidda/aidda.go
    x/perplexity-example.go
    v3/client/chatclient.go
    v3/openai/openai.go
    v3/perplexity/perplexity.go

.stop

ensure aidda-generated code is committed before prompt file is edited again

Brainstorm how I might ensure that the aidda-generated code is
committed before the prompt file is edited again.  I keep forgetting
to hit '[c]ommit' after '[g]enerate' and then I edit the prompt file
again and the prompt file that should have been used as the commit
message is no longer available without hitting undo a bunch of times
in the editor.

Understand that I keep the editor (neovim) open and run the aidda
command in a temporary neovim terminal window.  I don't set the
AIDDA_EDITOR environment variable to open the editor because I want to
keep the editor open between aidda runs.  I don't see or run the aidda
menu otherwise, so I can't see any warning or disabled menu selections in
the aidda menu until after I've erroneously edited the prompt file
and run the aidda menu command again.

Also understand that other users might be using a different editor or
might not be using a terminal-based editor at all, so I can't rely on
neovim-specific features to solve this problem.

In your brainstorming, consider these solutions but add your own ideas
as well:

- set the prompt file to read-only after generating code, then read-write
  after committing
- transform the role of the prompt file to be instead a menu itself;
  get rid of the separate aidda menu, have aidda be a daemon that
  watches the prompt file for changes and runs the appropriate command
  when the prompt file is saved; have aidda modify the prompt file
  as needed to indicate the state of the aidda-generated code and
  commit status
In:
    v3/aidda/aidda.go

.stop

In: 
    .aidda/plan.md
    v3/util/util.go
    v3/cli/chat_test.go
    v3/cli/cli.go
    v3/cli/cli_test.go
    v3/cli/migration_test.go
    v3/lang/go/split.go
    v3/lang/go/split_test.go
    v3/core/grokker_test.go
    v3/core/chunk.go
    v3/core/chat.go
    v3/core/migrate.go
    v3/core/grokker.go
    v3/core/gateway.go
    v3/core/git.go
    v3/core/model.go
    v3/core/api.go
    v3/core/document.go
    v3/cmd/grok/main.go
    v3/aidda/aidda_test.go
    v3/aidda/cmd/aidda3/main.go
    v3/aidda/run.go
    v3/aidda/aidda.go
    x/perplexity-example.go
    v3/client/chatclient.go
    v3/openai/openai.go
    v3/perplexity/perplexity.go
    x/patterns.md
