write llm-file-io package

I need more flexibility in how I read and write files to various LLM
models, so I want to create a new package called llm-file-io that
will handle reading and writing files using either regexes, text
delimiters, XML, or JSON.  This package will be used by the
existing code, replacing the current regex-based file handling.

See the llm-file-io/discussion.md file for more details on the
design and implementation of this package.

The API for the new package should be similar to:

- func (g *Grokker) SendWithFiles(callback func(modelName, sysmsg, msgs) (resp string, err error), modelName, sysmsg string, msgs []client.ChatMsg, infiles []string, outfiles []string) (resp string, err error) 



In:
    v3/llm-file-io/discussion.md
    v3/util/util.go
    v3/cli/chat_test.go
    v3/cli/cli.go
    v3/cli/cli_test.go
    v3/cli/migration_test.go
    v3/openai/openai.go
    v3/lang/go/split.go
    v3/lang/go/split_test.go
    v3/core/grokker_test.go
    v3/core/chunk.go
    v3/core/chat.go
    v3/core/migrate.go
    v3/core/grokker.go
    v3/core/git.go
    v3/core/gateway.go
    v3/core/model.go
    v3/core/api.go
    v3/core/document.go
    v3/core/embeddings-openai.go
    v3/cmd/grok/main.go
    v3/client/chatclient.go
    v3/aidda/aidda_test.go
    v3/aidda/cmd/aidda3/main.go
    v3/aidda/run.go
    v3/aidda/aidda.go
    v3/perplexity/perplexity.go

.stop

ensure aidda-generated code is committed before prompt file is edited again

Brainstorm how I might ensure that the aidda-generated code is
committed before the prompt file is edited again.  I keep forgetting
to hit '[c]ommit' after '[g]enerate' and then I edit the prompt file
again and the prompt file that should have been used as the commit
message is no longer available without hitting undo a bunch of times
in the editor.

Understand that I keep the editor (neovim) open and run the aidda
command in a temporary neovim terminal window.  I don't set the
AIDDA_EDITOR environment variable to open the editor because I want to
keep the editor open between aidda runs.  I don't see or run the aidda
menu otherwise, so I can't see any warning or disabled menu selections in
the aidda menu until after I've erroneously edited the prompt file
and run the aidda menu command again.

Also understand that other users might be using a different editor or
might not be using a terminal-based editor at all, so I can't rely on
neovim-specific features to solve this problem.

In your brainstorming, consider these solutions but add your own ideas
as well:

- set the prompt file to read-only after generating code, then read-write
  after committing
- transform the role of the prompt file to be instead a menu itself;
  get rid of the separate aidda menu, have aidda be a daemon that
  watches the prompt file for changes and runs the appropriate command
  when the prompt file is saved; have aidda modify the prompt file
  as needed to indicate the state of the aidda-generated code and
  commit status
In:
    v3/aidda/aidda.go

.stop

In: 
    .aidda/plan.md
    v3/util/util.go
    v3/cli/chat_test.go
    v3/cli/cli.go
    v3/cli/cli_test.go
    v3/cli/migration_test.go
    v3/lang/go/split.go
    v3/lang/go/split_test.go
    v3/core/grokker_test.go
    v3/core/chunk.go
    v3/core/chat.go
    v3/core/migrate.go
    v3/core/grokker.go
    v3/core/gateway.go
    v3/core/git.go
    v3/core/model.go
    v3/core/api.go
    v3/core/document.go
    v3/cmd/grok/main.go
    v3/aidda/aidda_test.go
    v3/aidda/cmd/aidda3/main.go
    v3/aidda/run.go
    v3/aidda/aidda.go
    x/perplexity-example.go
    v3/client/chatclient.go
    v3/openai/openai.go
    v3/perplexity/perplexity.go
    x/patterns.md
