File: /home/stevegt/lab/grokker/.aidda/plan.md
```markdown
# Integration Plan for Multi-Provider LLM Client Initialization

This plan revises our previous approach to support multiple LLM providers – notably OpenAI and Perplexity.ai – by abstracting client initialization and API calls based on the selected model configuration. The key changes and implementation strategies are as follows:

## Overview

- **Provider Abstraction:**  
  All API calls (chat completions, embeddings, etc.) will use a provider‐agnostic interface. The model configuration now includes a `Provider` field. During setup, Grokker will check the current model’s provider and initialize the appropriate client. This requires refactoring the current `initClients()` function, which is currently OpenAI‑specific, into a factory‐style function.

- **Client Initialization Based on Model Configuration:**  
  The new design will inspect the model configuration:
  - If the model’s provider is `"openai"`, Grokker will initialize the OpenAI client(s).
  - If the model’s provider is `"perplexity"`, Grokker will initialize a Perplexity.ai client instead.
  
  This change ensures that subsequent API calls (for tokenization, chat completions, embeddings, etc.) are directed to the correct endpoints with appropriate credentials.

- **Creation of Perplexity.ai API Client:**  
  A new file `perplexity.go` in the `core` package will encapsulate all Perplexity.ai–specific logic. This file will:
  - Define a `PerplexityClient` type that implements the `ChatProvider` interface.
  - Include functions (e.g. `NewPerplexityClient` and `CompleteChat`) to build the request payload, send HTTP requests to Perplexity.ai’s endpoint, and parse responses.
  - Allow seamless integration in Grokker by letting the `initClients()` factory function choose which client (OpenAI or Perplexity.ai) to initialize based on the current model’s configuration.

## Implementation Strategy

1. **Refactor Client Initialization:**
   - Update the existing `initClients()` function in the API layer so that it examines the model’s provider field.
   - Convert `initClients()` into a factory-style function that instantiates an OpenAI client if the provider is `"openai"`, or instantiates a Perplexity.ai client (using the new `PerplexityClient` type) if the provider is `"perplexity"`.
   - Ensure that the client instance is stored in the Grokker object and that subsequent API calls invoke methods on the corresponding client.

2. **Create Perplexity.ai Package File:**
   - Develop a new file `/home/stevegt/lab/grokker/v3/core/perplexity.go` that includes:
     - The definition of `PerplexityClient` (with fields for API key and endpoint).
     - A constructor function `NewPerplexityClient()` which reads the `PERPLEXITY_API_KEY` environment variable.
     - An implementation of the `CompleteChat(sysmsg string, messages []ChatMsg) (string, error)` function required by the `ChatProvider` interface.
   - Use the Perplexity.ai API endpoint (`https://api.perplexity.ai/chat/completions`) and model name (for example, `"sonar-deep-research"`) to form the request.
   - Parse the JSON response to extract the chat response from the first choice.

3. **Testing and Documentation:**
   - Update unit and integration tests to confirm that both OpenAI and Perplexity.ai providers are handled correctly depending on the model configuration.
   - Update developer documentation and README files with instructions on setting the appropriate environment variables (e.g. `OPENAI_API_KEY` and `PERPLEXITY_API_KEY`), and on switching between providers using the new Provider field in the model configuration.

This revised plan will ensure Grokker becomes provider-agnostic, enabling support for multiple LLM backends while maintaining a unified interface for API calls.

```
EOF_/home/stevegt/lab/grokker/.aidda/plan.md

File: /home/stevegt/lab/grokker/v3/core/perplexity.go
```go
package core

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"strings"
)

// PerplexityClient encapsulates the API client for Perplexity.ai.
type PerplexityClient struct {
	APIKey   string
	Endpoint string
}

// NewPerplexityClient creates a new PerplexityClient instance.
// It reads the PERPLEXITY_API_KEY from the environment and sets the API endpoint.
func NewPerplexityClient() *PerplexityClient {
	key := os.Getenv("PERPLEXITY_API_KEY")
	if key == "" {
		fmt.Fprintln(os.Stderr, "Warning: PERPLEXITY_API_KEY environment variable not set")
	}
	return &PerplexityClient{
		APIKey:   key,
		Endpoint: "https://api.perplexity.ai/chat/completions",
	}
}

// PerplexityRequest defines the request payload sent to Perplexity.ai.
type PerplexityRequest struct {
	Model    string    `json:"model"`
	Messages []Message `json:"messages"`
}

// Message represents a single message in the chat conversation.
type Message struct {
	Role    string `json:"role"`
	Content string `json:"content"`
}

// PerplexityResponse defines the structure of the response from Perplexity.ai.
type PerplexityResponse struct {
	Citations []string `json:"citations"`
	Choices   []Choice `json:"choices"`
}

// Choice holds a single generated chat choice.
type Choice struct {
	FinishReason string  `json:"finish_reason"`
	Role         string  `json:"role"`
	Message      Message `json:"message"`
}

// CompleteChat implements the ChatProvider interface for PerplexityClient.
// It sends the system message along with the chat history to the Perplexity.ai API
// and returns the content of the first choice in the response.
func (pc *PerplexityClient) CompleteChat(sysmsg string, messages []ChatMsg) (string, error) {
	// Prepare the request payload.
	reqPayload := PerplexityRequest{
		Model: "sonar-deep-research", // This can be adjusted or made configurable.
		Messages: []Message{
			{
				Role:    "system",
				Content: sysmsg,
			},
		},
	}

	// Convert ChatMsg (from Grokker) to Message for Perplexity.ai.
	for _, m := range messages {
		// Perplexity.ai prefers lowercase role names.
		reqPayload.Messages = append(reqPayload.Messages, Message{
			Role:    strings.ToLower(m.Role),
			Content: m.Txt,
		})
	}

	// Marshal the request payload.
	payloadBytes, err := json.Marshal(reqPayload)
	if err != nil {
		return "", err
	}

	// Create the HTTP request.
	req, err := http.NewRequest("POST", pc.Endpoint, strings.NewReader(string(payloadBytes)))
	if err != nil {
		return "", err
	}
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authorization", fmt.Sprintf("Bearer %s", pc.APIKey))

	// Execute the HTTP request.
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()

	// Check for non-200 status codes.
	if resp.StatusCode != http.StatusOK {
		body, _ := ioutil.ReadAll(resp.Body)
		return "", fmt.Errorf("Perplexity API returned status %d: %s", resp.StatusCode, string(body))
	}

	// Read and unmarshal the response.
	respBytes, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return "", err
	}

	var perplexityResp PerplexityResponse
	if err := json.Unmarshal(respBytes, &perplexityResp); err != nil {
		return "", err
	}

	if len(perplexityResp.Choices) == 0 {
		return "", fmt.Errorf("no choices in Perplexity response")
	}

	// Return the content of the first choice.
	return perplexityResp.Choices[0].Message.Content, nil
}
```
EOF_/home/stevegt/lab/grokker/v3/core/perplexity.go