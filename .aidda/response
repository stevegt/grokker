File: /home/stevegt/lab/grokker/.aidda/plan.md
```markdown
# Integration Plan for Multi-Provider LLM Client Initialization and Client Configuration

This plan revises our previous approach to support multiple LLM providers – notably OpenAI and Perplexity.ai – by abstracting client initialization and API calls based on the selected model configuration. The key changes and implementation strategies are as follows:

## Overview

- **Provider Abstraction and Client Initialization:**  
  Instead of having an `initClients()` function that is specific to OpenAI, Grokker will now initialize the chat client based on the model’s configuration. If the model’s provider is set to `"openai"`, Grokker will initialize the OpenAI client(s) as before. If the model’s provider is set to `"perplexity"`, Grokker will initialize a Perplexity.ai client.

- **Perplexity.ai Client Implementation:**  
  A new `PerplexityClient` will be implemented (see file `/home/stevegt/lab/grokker/v3/perplexity/perplexity.go`) to satisfy the `ChatProvider` interface. This client will send requests to the Perplexity.ai API endpoint (e.g. `https://api.perplexity.ai/chat/completions`) using a designated model (for example, `"sonar-deep-research"`). It will obtain its API key from the `PERPLEXITY_API_KEY` environment variable.

- **File Organization and Refactoring:**  
  - **Client Initialization:** The existing `initClients()` function will be refactored into a factory function that checks the model configuration and calls either the OpenAI client initializer or, if the provider is `"perplexity"`, calls `NewPerplexityClient()` from the perplexity package.
  - **New Perplexity Client Files:**  
    - A core-level wrapper is defined in `/home/stevegt/lab/grokker/v3/core/perplexity.go` to expose the Perplexity client constructor and its basic implementation.
    - The full implementation of the Perplexity.ai client is moved to `/home/stevegt/lab/grokker/v3/perplexity/perplexity.go` where provider–specific logic resides.

## Implementation Strategy

1. **Refactor Client Initialization:**
   - Update `initClients()` to inspect the current model’s provider field.
   - If the provider is `"openai"`, initialize the OpenAI client as before.
   - If the provider is `"perplexity"`, initialize the Perplexity.ai client by calling `NewPerplexityClient()`.

2. **Implement Perplexity.ai Client:**
   - In the core package (file `/home/stevegt/lab/grokker/v3/core/perplexity.go`), define a `PerplexityClient` type that satisfies the `ChatProvider` interface.  
   - Implement a constructor `NewPerplexityClient()` that reads the `PERPLEXITY_API_KEY` environment variable.
   - Implement the method `CompleteChat(sysmsg string, messages []ChatMsg) (string, error)` which builds a JSON payload, sends it to Perplexity.ai’s endpoint, and parses the response.

3. **Move Provider Code to Its Own Package:**
   - Place the full Perplexity.ai client implementation into `/home/stevegt/lab/grokker/v3/perplexity/perplexity.go` under a dedicated package (`perplexity`), so that core code can remain provider–agnostic by importing this package when needed.

4. **Testing and Documentation:**
   - Update existing tests to verify that switching the model provider to `"perplexity"` correctly initializes the Perplexity.ai client.
   - Update documentation to instruct developers on setting the `PERPLEXITY_API_KEY` environment variable and configuring the model’s provider field.

This design will enable Grokker to seamlessly switch between different LLM providers while using a unified interface for chat completions and other API calls.

EOF_/home/stevegt/lab/grokker/.aidda/plan.md

File: /home/stevegt/lab/grokker/v3/core/perplexity.go
```go
package core

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"time"
)

// PerplexityClient implements the ChatProvider interface for Perplexity.ai.
type PerplexityClient struct {
	APIKey   string
	Endpoint string
	Model    string
}

// NewPerplexityClient creates a new PerplexityClient instance.
// It reads the PERPLEXITY_API_KEY from the environment.
func NewPerplexityClient() (*PerplexityClient, error) {
	key := os.Getenv("PERPLEXITY_API_KEY")
	if key == "" {
		return nil, errors.New("PERPLEXITY_API_KEY environment variable not set")
	}
	return &PerplexityClient{
		APIKey:   key,
		Endpoint: "https://api.perplexity.ai/chat/completions",
		Model:    "sonar-deep-research",
	}, nil
}

// ChatMsg represents a chat message.
type ChatMsg struct {
	Role string `json:"role"`
	Txt  string `json:"content"`
}

// CompleteChat sends the provided system message and conversation history to the Perplexity.ai API,
// and returns the response text.
func (pc *PerplexityClient) CompleteChat(sysmsg string, messages []ChatMsg) (string, error) {
	// Build the payload for the API request.
	payload := map[string]interface{}{
		"model":          pc.Model,
		"system_message": sysmsg,
		"messages":       messages,
	}
	body, err := json.Marshal(payload)
	if err != nil {
		return "", err
	}

	req, err := http.NewRequest("POST", pc.Endpoint, bytes.NewReader(body))
	if err != nil {
		return "", err
	}
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authorization", "Bearer "+pc.APIKey)

	client := &http.Client{Timeout: 30 * time.Second}
	resp, err := client.Do(req)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		respBody, _ := ioutil.ReadAll(resp.Body)
		return "", fmt.Errorf("Perplexity API error: %s", string(respBody))
	}

	var result struct {
		Choices []struct {
			Message struct {
				Content string `json:"content"`
			} `json:"message"`
		} `json:"choices"`
	}
	err = json.NewDecoder(resp.Body).Decode(&result)
	if err != nil {
		return "", err
	}
	if len(result.Choices) == 0 {
		return "", errors.New("no response choices from Perplexity API")
	}
	return result.Choices[0].Message.Content, nil
}
```
EOF_/home/stevegt/lab/grokker/v3/core/perplexity.go

File: /home/stevegt/lab/grokker/v3/perplexity/perplexity.go
```go
package perplexity

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"time"
)

// ChatMsg represents a chat message for Perplexity.
type ChatMsg struct {
	Role string `json:"role"`
	Txt  string `json:"content"`
}

// Client provides a Perplexity.ai client implementation.
type Client struct {
	APIKey   string
	Endpoint string
	Model    string
}

// NewClient returns a new Perplexity client.
// It reads the PERPLEXITY_API_KEY environment variable.
func NewClient() (*Client, error) {
	key := os.Getenv("PERPLEXITY_API_KEY")
	if key == "" {
		return nil, errors.New("PERPLEXITY_API_KEY environment variable not set")
	}
	return &Client{
		APIKey:   key,
		Endpoint: "https://api.perplexity.ai/chat/completions",
		Model:    "sonar-deep-research",
	}, nil
}

// CompleteChat sends the system message and conversation history to Perplexity.ai
// and returns the chat response.
func (c *Client) CompleteChat(sysmsg string, messages []ChatMsg) (string, error) {
	payload := map[string]interface{}{
		"model":          c.Model,
		"system_message": sysmsg,
		"messages":       messages,
	}
	body, err := json.Marshal(payload)
	if err != nil {
		return "", err
	}

	req, err := http.NewRequest("POST", c.Endpoint, bytes.NewReader(body))
	if err != nil {
		return "", err
	}
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authorization", "Bearer "+c.APIKey)

	client := &http.Client{Timeout: 30 * time.Second}
	resp, err := client.Do(req)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		respBody, _ := ioutil.ReadAll(resp.Body)
		return "", fmt.Errorf("Perplexity API error: %s", string(respBody))
	}

	var result struct {
		Choices []struct {
			Message struct {
				Content string `json:"content"`
			} `json:"message"`
		} `json:"choices"`
	}
	err = json.NewDecoder(resp.Body).Decode(&result)
	if err != nil {
		return "", err
	}
	if len(result.Choices) == 0 {
		return "", errors.New("no reply choices from Perplexity API")
	}
	return result.Choices[0].Message.Content, nil
}
```
EOF_/home/stevegt/lab/grokker/v3/perplexity/perplexity.go